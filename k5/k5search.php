<?php

##### K5SEARCH.PHP

##### Powers the kaulana.com weblog, revision five.
##### Including this file defines an auxilliary class for handling keyword searches.

require_once('k5base.php');

####################################################
##### Keyword Search Tool
####################################################

/*    Enables easy keyword searches over the database class.
 */

class k5search
{
	var $database;
	var $table;
	var $column;
	var $fields;
	var $order;
	var $by;
	var $limit;
	var $distinct;

	function k5search($k5db)
	// Provide the above database class here to get started.
	{
		$this->database = $k5db;
		$this->set_parameters("", ""); // these need to be properly assigned eventually
	}

	function set_parameters($table, $column, $fields = "", $order = "", $by = "", $limit = "", $distinct = "")
	// Adjust the details of what exactly in the database to search. The only required parameters
	// are $table and $column, and the rest are optional (and are passed directly to the query).
	{
		$this->table = $table;
		$this->column = mysql_real_escape_string($column);
		$this->fields = $fields;
		$this->order = $order;
		$this->by = $by;
		$this->limit = $limit;
		$this->distinct = $distinct;
	}

	function find($str, $logic = "AND", $assoc = true)
	// Search against a column for a given set of keywords, and return matching entries.
	// Use the $logic field to specify AND or OR logic for determining matches.
	{
		if ($this->table == "" || $this->column == "")
		{
			trigger_error("Search parameters not set.", E_USER_WARNING);
			return false;
		}

		$words = $this->get_keywords($str); $id_query = "";

		for($i = 0; $i < sizeof($words); $i++)
		{
			$id_query .= "`$column` LIKE '%".$words[$i]."%'";
			if ($i < sizeof($words)-1) $id_query .= " $logic ";
		}

		return get_by($this->table, $id_query, $this->fields, $this->order, $this->by,
				$this->limit, $this->distinct, $assoc);
	}

	function find_multicolumn($str, $columns, $logic = "OR", $wordlogic = "AND", $assoc = true)
	// Search against many columns for a given set of keywords, and return matching entries.
	// Use $logic to determine matches between all involved columns, and $wordlogic to join the results
	// across all search keywords.
	//
	// $columns is expected in the form array("col1", "col2", ...). Notice that this IGNORES the
	// value of $column internal to the search tool class.
	{
		if ($this->table == "")
		{
			trigger_error("Search parameters not set.", E_USER_WARNING);
			return false;
		}

		$words = $this->get_keywords($str); $id_query = "";

		for($i = 0; $i < sizeof($words); $i++)
		{
			$id_query .= "(";
			for($j = 0; $j < sizeof($columns); $j++)
			{
				$id_query .= "`".$columns[$j]."` LIKE '%".$words[$i]."%'";
				if ($j < sizeof($columns)-1) $id_query .= " $logic ";
			}
			$id_query .= ")";

			if ($i < sizeof($words)-1) $id_query .= " $wordlogic ";
		}

		return $this->database->get_by($this->table, $id_query, $this->fields, $this->order,
				$this->by, $this->limit, $this->distinct, $assoc);
	}

	function get_keywords($str)
	// Extract keywords from a search string. Treats all double quoted strings as single keywords.
	{
		$terms = explode("\"", $str); // split based on the quotation marks

		if (sizeof($terms) % 2 == 0) $terms[sizeof($terms)] = ""; // add dummy term for unbalanced quotes

		$j = 0; for($i = 0; $i < sizeof($terms); $i++)
		{
			if ($i % 2 == 0) // every even term is not inside quotes
			{
				$subterms = explode(" ", $terms[$i]); // split apart on white space
				for($k = 0; $k < sizeof($subterms); $k++)
				{
					if ($subterms[$k])
					{
						$finalterms[$j++] = mysql_real_escape_string($subterms[$k]);
					}
				}
			}
			else if ($terms[$i]) // every odd term is quoted, so add it on its own
			{
				$finalterms[$j++] = mysql_real_escape_string($terms[$i]);
			}
		}

		return $finalterms;
	}

	function generate_form($action = "")
	// Outputs a standard search form. You can specify $action to determine where the form goes.
	// If using query strings in $action, make sure to use $_SERVER["PHP_SELF"] as well.
	{
		$keywords = $_POST["search_keywords"];
		$value = $keywords ? clean_html($keywords) : "looking for something?";
?>

<form method="post" action="<?php echo $action ?>">
<p style="text-align: center">
<input type="text" name="search_keywords" value="<?php echo $value ?>" size="25" onclick="cleartext(this)" class="paren" />
<input type="submit" name="search_action" value="find it" title="add a * to your query to increase result set" />
</p>
</form>
<br />

<?php
	}

	function process_form()
	// Gathers the information generated by the above form.
	{
		if ($_POST["search_action"] == "find it")
		{
			return clean_normal($_POST["search_keywords"]);
		}
		else
		{
			return false;
		}
	}
};

##### End PHP code, (c) 2006 kaulana.com

?>